npm init 

installer toutes les dépendances nécessaires:
npm i express
npm i dotenv
npm i mongoose
npm i nodemon

ajouter dans le script
"server": "nodemon ./backend/server.js"
lorsque je ferais npm server, cela fera tourner le serveur

Installation terminée

Faire le serveur
à la racine du projet, dossier backend -> fichier server.js
voir fichier

ouvrir postman et testé si cela fonctionne avec l adresse
en get  : http://localhost:5500/costume
le message est bien affiché

faire un dossier routes ->fichier costume.routes.js
voir fichier

faire la bdd avec mongo DB

dans mon cas reprendre l'adresse de connexion prealablement créer 
faire un fichier .env a la racine du projet pour cacher cette adresse

création des tables de la bdd qui s'appellent ici des models
dossier models -> fichier costume.routes.js

faire les controllers pour interagir 

dossier controllers -> fichier costume.controller.js

 if (!req.body.message) {
        res.status(400).json({ message: "Merci d'ajouter les infos" });
      }





      import React, { useState, useEffect, useCallback } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import querystring from "querystring";
import { getCostumeByTitle } from "./api/api";
import "../app/globals.css";
import Loading from "@/components/loading";
import Footer from "@/components/footer";

function Product() {
  const router = useRouter();

  // Récupérer les paramètres de l'URL avec querystring
  const { titre } = querystring.parse(router.asPath.split(/\?/)[1]);

  const [costume, setCostume] = useState({
    titre: '',
    description: '',
    imageUne: '',
    imageDeux: '',
    prix: '',
  });
  const [error, setError] = useState(null);

  // Utiliser le titre pour récupérer les données du costume dans votre base de données
  const fetchCostume = useCallback(async () => {
    try {
      console.log("Fetching costume data...");
      const costumeData = await getCostumeByTitle(titre);
      console.log("Costume data retrieved:", costumeData);
      setCostume(costumeData);
      console.log(getCostumeByTitle(titre));
      setError(null);
    } catch (error) {
      console.error("Error fetching costume data:", error);
      setError(error.message);
    }
  }, [titre]);

  useEffect(() => {
    console.log("useEffect called");
    
    fetchCostume();
  }, [fetchCostume]);

  if (error) {
    return <p>Une erreur est survenue : {error}</p>;
  }

  if (!costume) {
    return <Loading />;
  }
  return (
    <>
      {costume ? (
        <>
          <h1>{costume.titre}</h1>
          <p>{costume.description}</p>
          <img src={costume.imageUne} alt={costume.titre} />
          <img src={costume.imageDeux} alt={costume.titre} />
          <p>{costume.prix} €/jour</p>
          <br />
          <Link href="/location">Retour</Link>
          <br />
          <br />
          <br />
          <br />
          <br />
          <Footer />
        </>
      ) : (
        <Loading />
      )}
    </>
  );
}

export default Product;


import React from "react";

export async function getCostumeByTitle(titre) {
  const response = await fetch(
    `http://localhost:5500/costume?titre=${encodeURIComponent(titre)}`
  );
  const data = await response.json();
  console.log(data);
  return data;
}





import axios from "axios";

export async function getAllCostumeTitles() {
  const response = await axios.get("http://localhost:5400/costume");
  const data = response.data.map((costume) => costume.titre);
  console.log(data);
  return data;
}

export async function getCostumeByTitle(titre) {
  const response = await axios.get(
    `http://localhost:5400/costume?titre=${encodeURIComponent(titre)}`
  );
  const data = response.data;
  console.log(data);
  return data;
}





import Loading from "@/components/loading";
import { useRouter } from "next/router";
import { getAllCostumeTitles, getCostumeByTitle } from "../api/api";

function Product({ costume }) {
  const router = useRouter();

  if (router.isFallback) {
    return <Loading/>;
  }

  if(!costume){
    return <p>Costume introuvable</p>
  }

  return (
    <div>
      <h1>{costume.titre}</h1>
      <p>{costume.description}</p>
      <img src={costume.image} alt={costume.titre} />
      <p>{costume.prix} €/jour</p>
    </div>
  );
}

export async function getStaticProps({ params }) {
  const costume = await getCostumeByTitle(params.titre);

  return {
    props: {
      costume,
    },
  };
}

export async function getStaticPaths() {
  const costumes = await getAllCostumeTitles();
  const paths = costumes.map((title) => ({ params: { titre: title } }));

  return { paths, fallback: true };
}

export default Product;



interface CartProps {
  count: number;
}

export default function Cart({ count }: CartProps) {
  return (
    <div className="flex items-center">
      <FontAwesomeIcon icon={ faShoppingCart } />
      <span>{count}</span>
    </div>
  );
}


const handleAddToCart = () => {
    if (clickCount < 3) {
      setCartItems([...cartItems, costume]);
      setClickCount((prevClickCount) => prevClickCount + 1);
      //setClickCount(clickCount + 1);
      setErrorMessage("");
      
    } else {
      setErrorMessage("Le produit n'est disponible qu'en 3 exemplaires.");
    }
  };